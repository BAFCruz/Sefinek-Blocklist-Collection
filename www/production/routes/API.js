const express=require("express"),router=express.Router(),autoIndex=require("express-autoindex"),path=require("node:path"),fs=require("node:fs"),formatTime=require("../utils/formatTime.js"),{version:version}=require("../../../package.json"),generated=path.join(__dirname,"..","..","blocklists","generated"),logs=path.join(__dirname,"..","public","logs");router.get("/api/v1/version",((e,s)=>{s.status(200).json({success:!0,code:200,version:version,node:process.version.replace("v","")})})),router.get("/api/v1/uptime",((e,s)=>{s.status(200).json({success:!0,code:200,time:formatTime.time(process.uptime()),full:formatTime.full(process.uptime()),uptime:process.uptime()})})),router.use("/api/v1/static/generated",autoIndex(generated,{json:!0})),router.use("/api/v1/static/logs",autoIndex(logs,{json:!0})),router.use("/api/v1/static/cache/:name",(async(e,s)=>{const r=e.url.replace(`/cache/${e.params.name}`,"").replace(/%20/g," "),t=path.join(__dirname,"..","..","cache",e.params.name,r);if(!fs.existsSync(t))return s.sendStatus(404);if((await fs.promises.lstat(t)).isDirectory())return s.sendStatus(404);const a=await fs.promises.readFile(t,"utf8");s.json({success:!0,status:200,message:a,type:"sha512"})})),module.exports=router;